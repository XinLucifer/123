#ifndef STACK_H
#define STACK_H

class StackOfIntegers//類別 名稱 
{
public:               //公開的 ::可以被存取 
  StackOfIntegers();//類別的建構子 
  bool isEmpty() const;//測試是否為空的函數 
  int peek() const;//取出最上面元素的函數 
  void push(int value);//把資料丟入的函數 
  int pop();//取出最上層資料的函數 
  int getSize() const;//取得堆疊的大小的函數 

private:            //私有 
  int elements[100];//整數類型的元素大小是100 
  int size;//整數的類型的大小 
};

#endif


#include "StackOfIntegers.h"

StackOfIntegers::StackOfIntegers()//類別的建構子的實作  
{
  size = 0;//產生大小為零的StackOfIntegers物件  
}

bool StackOfIntegers::isEmpty() const //測試是否為空的實作  
{//此函數執行後回傳的值為布林，真或假  
  return (size == 0);//()判斷式size == 0 若大小為零則回傳假；若大小不為零則回傳真  
}

int StackOfIntegers::peek() const //取出最上層資料的實作  
{
  return elements[size - 1];//大小
}

void StackOfIntegers::push(int value)//把資料丟入的實作 
{
  elements[size++] = value;// 
}

int StackOfIntegers::pop()//取出最上層資料的實作 
{
  return elements[--size];// 
}

int StackOfIntegers::getSize() const//取得堆疊的大小的實作 
{
  return size;// 
}
